{"version":3,"sources":["lib/etsy_db.js"],"names":["$","document","ready","etsyDB","init","db","Dexie","getDatabaseNames","databases","indexOf","create","open","version","stores","products","bins","console","log","listTables","tables","forEach","table","i","name","delete","then","indexedDB","deleteDatabase","export","transaction","exportNextTable","shift","toArray","a","result","push","tableName","contents","length","map","t","currentTransaction","add","listing","where","equals","listing_id","count","bin_id","bin_name","title","categories","category_path","toString","price","created","creation_tsz","original_creation","original_creation_tsz","setBin","product_id","callback","update","success","bin","display","toastSuccess","getNew","data","getAll","new_data","each","key","parseInt","bin_data","id","total","notes","updateCounts","toastError"],"mappings":"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","file":"lib/etsy_db.min.js","sourcesContent":["$(document).ready(function() {\n    $.etsyDB = {\n        init: function() {\n            $.db = new Dexie('etsyDB');\n            Dexie.getDatabaseNames(function(databases) {\n                if (databases.indexOf('etsyDB') == -1) {\n                    $.etsyDB.create();\n                }\n                else {\n                    $.db.open();\n                }\n            });\n        },\n\n        create: function() {\n            $.db.version(1).stores(\n                {\n                    products: '++id, bin_id, bin_name, listing_id, title, categories, price, created, original_created',\n                    bins: '++id, name, notes'\n                }\n            );\n            console.log(\"Created database\");\n            $.db.open();\n        },\n\n        listTables: function() {\n            $.db.tables.forEach(function (table, i) {\n                console.log('Table ' + i + \": \" + table.name);\n            });\n        },\n\n        delete: function() {\n            $.db.delete().then(function() {\n                console.log('Deleted database');\n\n                // This is required, it seems that Dexie is only deleting the tables\n                indexedDB.deleteDatabase(\"etsyDB\");\n            });\n        },\n\n        export: function() {\n            return $.db.transaction('r', $.db.tables, function() {\n                // Map to transaction-bound table instances because instances in $.db.tables are not bound\n                // to current transaction by default (may change in future versions of Dexie)\n                var tables = $.db.tables.map(function (t) {\n                    return Dexie.currentTransaction.tables[t.name];\n                });\n                // Prepare a result: An array of {tableName: \"name\", contents: [objects...]}\n                var result = [];\n                // Recursively export each table:\n                return exportNextTable ();\n\n                function exportNextTable () {\n                    var table = tables.shift();\n                    return table.toArray().then(function(a) {\n                        result.push({\n                            tableName: table.name,\n                            contents: a\n                        });\n                        return tables.length > 0 ?\n                            exportNextTable() :\n                            result;\n                    });\n                }\n            });\n        },\n\n        products: {\n            add: function(listing) {\n                $.db.table('products').where(\"listing_id\").equals(listing.listing_id).count(function(count) {\n                    if (count === 0) {\n                        $.db.table('products').add({\n                            bin_id: -1,\n                            bin_name: 'None',\n                            listing_id: listing.listing_id,\n                            title: listing.title,\n                            categories: listing.category_path.toString(),\n                            price: listing.price,\n                            created: listing.creation_tsz,\n                            original_creation: listing.original_creation_tsz\n                        }).then(function() {\n                            console.log(\"Added listing #\" + listing.listing_id);\n                        });\n                    } else {\n                        //console.log(\"Attempted to add duplicate listing #\" + listing.listing_id + ' - ' + listing.title);\n                    }\n                });\n            },\n\n            setBin: function(product_id, bin_id, callback) {\n                $.db.table('products').update(product_id, {bin_id: bin_id}).then(function(success) {\n                    if (success) {\n                        $.db.table('bins').where(\"id\").equals(bin_id).toArray().then(function(bin) {\n                            $.display.toastSuccess('Updated product bin successfully');\n                            callback(product_id, bin_id, bin[0].name);\n                        });\n                    } else {\n                        $.display.toastSuccess('There was an error updating the product bin!');\n                    }\n                });\n            },\n\n            getNew: function(callback) {\n                $.db.table('products').where(\"bin_id\").equals(-1).toArray().then(function(data) {\n                    callback(data);\n                });\n            },\n\n            getAll: function(callback) {\n                $.db.table('products').toArray().then(function(data) {\n                    var new_data = data;\n                    $.each(data, function(key) {\n                        if (data[key].bin_id != -1) {\n                            console.log(data[key].bin_id);\n                            $.db.table('bins').where('id').equals(parseInt(data[key].bin_id)).toArray().then(function(bin_data) {\n                                new_data[key]['bin_name'] = bin_data[0].name;\n                                console.log(new_data[key]);\n                            });\n                        }\n\n                        if (key + 1 === data.length) {\n                            // TODO: Get this shit passing the actual fucking name back\n                            //console.log(new_data);\n                            callback(new_data);\n                        }\n                    });\n                });\n            }\n        },\n\n        bins: {\n            getAll: function(callback) {\n                var bins = [];\n                $.db.table('bins').each(function(bin) {\n                    $.db.table('products').where(\"bin_id\").equals(bin.id).count(function(count) {\n                        bin.total = count;\n                        bins.push(bin);\n                    });\n                }).then(function() {\n                    callback(bins);\n                });\n            },\n\n            add: function(name, notes, callback) {\n                $.db.table('bins').where(\"name\").equals(name).count(function(count) {\n                    if (count === 0) {\n                        $.db.table('bins').add({\n                            name: name,\n                            notes: notes\n                        }).then(function (id) {\n                            $.display.toastSuccess(\"Created bin '\" + name + \"' successfully\");\n                            $.display.updateCounts();\n                            callback([{id: id, name: name, notes: notes}], true);\n                        });\n                    } else {\n                        $.display.toastError(\"Bin '\" + name + \"' already exists!\");\n                    }\n                });\n            },\n\n            update: function(id, name, notes, callback) {\n                $.db.table('bins').where(\"name\").equals(name).count(function(count) {\n                    if (count === 0) {\n                        $.db.table('bins').update(id, {name: name, notes: notes}).then(function (success) {\n                            if (success) {\n                                $.display.toastSuccess(\"Bin #\" + id + \" updated successfully\");\n                                callback({id: id, name: name, notes: notes});\n                            } else {\n                                $.display.toastError(\"An error occured while updating bin #\" + id);\n                            }\n                        });\n                    } else {\n                        $.display.toastError(\"Error! A bin already exists with the name '\" + name + \"'\");\n                    }\n                });\n            },\n\n            delete: function(id, name, callback) {\n                $.db.table('bins').where(\"id\").equals(id).delete().then(function() {\n                    $.display.toastSuccess('Bin #' + id + \" - '\" + name + \"' deleted successfully\");\n                    callback(id);\n                });\n            }\n        }\n    };\n});\n"],"sourceRoot":"/source/"}