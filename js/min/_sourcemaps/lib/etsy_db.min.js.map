{"version":3,"sources":["lib/etsy_db.js"],"names":["$","document","ready","etsyDB","init","db","Dexie","getDatabaseNames","databases","indexOf","create","open","version","stores","products","bins","console","log","listTables","tables","forEach","table","i","name","delete","then","indexedDB","deleteDatabase","export","transaction","exportNextTable","shift","toArray","a","result","push","tableName","contents","length","map","t","currentTransaction","add","listing","where","equals","listing_id","count","bin_id","title","categories","category_path","toString","price","created","creation_tsz","original_creation","original_creation_tsz","getNew","callback","data","getAll","each","bin","id","total","notes","Materialize","toast","display","updateCounts","bin_name"],"mappings":"AAAAA,EAAEC,UAAUC,MAAM,WACdF,EAAEG,QACEC,KAAM,WACFJ,EAAEK,GAAK,GAAIC,OAAM,UACjBA,MAAMC,iBAAiB,SAASC,GACO,IAA/BA,EAAUC,QAAQ,UAClBT,EAAEG,OAAOO,SAGTV,EAAEK,GAAGM,UAKjBD,OAAQ,WACJV,EAAEK,GAAGO,QAAQ,GAAGC,QAERC,SAAU,gFACVC,KAAM,sBAGdC,QAAQC,IAAI,oBACZjB,EAAEK,GAAGM,QAGTO,WAAY,WACRlB,EAAEK,GAAGc,OAAOC,QAAQ,SAAUC,EAAOC,GACjCN,QAAQC,IAAI,SAAWK,EAAI,KAAOD,EAAME,SAIhDC,SAAQ,WACJxB,EAAEK,GAAFL,YAAcyB,KAAK,WACfT,QAAQC,IAAI,oBAGZS,UAAUC,eAAe,aAIjCC,SAAQ,WACJ,MAAO5B,GAAEK,GAAGwB,YAAY,IAAK7B,EAAEK,GAAGc,OAAQ,WAWtC,QAASW,KACL,GAAIT,GAAQF,EAAOY,OACnB,OAAOV,GAAMW,UAAUP,KAAK,SAASQ,GAKjC,MAJAC,GAAOC,MACHC,UAAWf,EAAME,KACjBc,SAAUJ,IAEPd,EAAOmB,OAAS,EACnBR,IACAI,IAjBZ,GAAIf,GAASnB,EAAEK,GAAGc,OAAOoB,IAAI,SAAUC,GACnC,MAAOlC,OAAMmC,mBAAmBtB,OAAOqB,EAAEjB,QAGzCW,IAEJ,OAAOJ,QAiBfhB,UACI4B,IAAK,SAASC,GACV3C,EAAEK,GAAGgB,MAAM,YAAYuB,MAAM,cAAcC,OAAOF,EAAQG,YAAYC,MAAM,SAASA,GACnE,IAAVA,GACA/C,EAAEK,GAAGgB,MAAM,YAAYqB,KACnBM,OAAQ,GACRF,WAAYH,EAAQG,WACpBG,MAAON,EAAQM,MACfC,WAAYP,EAAQQ,cAAcC,WAClCC,MAAOV,EAAQU,MACfC,QAASX,EAAQY,aACjBC,kBAAmBb,EAAQc,wBAC5BhC,KAAK,WACJT,QAAQC,IAAI,kBAAoB0B,EAAQG,iBAQxDY,OAAQ,SAASC,GACb3D,EAAEK,GAAGgB,MAAM,YAAYuB,MAAM,UAAUC,OAAO,IAAIb,UAAUP,KAAK,SAASmC,GACtED,EAASC,MAIjBC,OAAQ,SAASF,GACb3D,EAAEK,GAAGgB,MAAM,YAAYW,UAAUP,KAAK,SAASmC,GAC3CD,EAASC,OAKrB7C,MACI8C,OAAQ,SAASF,GACb,GAAI5C,KACJf,GAAEK,GAAGgB,MAAM,QAAQyC,KAAK,SAASC,GAC7B/D,EAAEK,GAAGgB,MAAM,YAAYuB,MAAM,UAAUC,OAAOkB,EAAIC,IAAIjB,MAAM,SAASA,GACjEgB,EAAIE,MAAQlB,EACZhC,EAAKoB,KAAK4B,OAEftC,KAAK,WACJkC,EAAS5C,MAIjB2B,IAAK,SAASnB,EAAM2C,GAChBlE,EAAEK,GAAGgB,MAAM,QAAQuB,MAAM,QAAQC,OAAOtB,GAAMwB,MAAM,SAASA,GAC3C,IAAVA,EACA/C,EAAEK,GAAGgB,MAAM,QAAQqB,KACfnB,KAAMA,EACN2C,MAAOA,IACRzC,KAAK,WACJ0C,YAAYC,MAAM,gBAAkB7C,EAAO,gBAAiB,KAC5DvB,EAAEqE,QAAQC,iBAGdH,YAAYC,MAAM,QAAU7C,EAAO,oBAAqB,QAKpEC,SAAQ,SAASwB,EAAQuB,GACrBvE,EAAEK,GAAGgB,MAAM,QAAQuB,MAAM,MAAMC,OAAOG,GAAtChD,YAAuDyB,KAAK,WACxD0C,YAAYC,MAAM,QAAUpB,EAAS,OAASuB,EAAW,wBAAyB","file":"lib/etsy_db.min.js","sourcesContent":["$(document).ready(function() {\n    $.etsyDB = {\n        init: function() {\n            $.db = new Dexie('etsyDB');\n            Dexie.getDatabaseNames(function(databases) {\n                if (databases.indexOf('etsyDB') == -1) {\n                    $.etsyDB.create();\n                }\n                else {\n                    $.db.open();\n                }\n            });\n        },\n\n        create: function() {\n            $.db.version(1).stores(\n                {\n                    products: '++id, bin_id, listing_id, title, categories, price, created, original_created',\n                    bins: '++id, name, notes'\n                }\n            );\n            console.log(\"Created database\");\n            $.db.open();\n        },\n\n        listTables: function() {\n            $.db.tables.forEach(function (table, i) {\n                console.log('Table ' + i + \": \" + table.name);\n            });\n        },\n\n        delete: function() {\n            $.db.delete().then(function() {\n                console.log('Deleted database');\n\n                // This is required, it seems that Dexie is only deleting the tables\n                indexedDB.deleteDatabase(\"etsyDB\");\n            });\n        },\n\n        export: function() {\n            return $.db.transaction('r', $.db.tables, function() {\n                // Map to transaction-bound table instances because instances in $.db.tables are not bound\n                // to current transaction by default (may change in future versions of Dexie)\n                var tables = $.db.tables.map(function (t) {\n                    return Dexie.currentTransaction.tables[t.name];\n                });\n                // Prepare a result: An array of {tableName: \"name\", contents: [objects...]}\n                var result = [];\n                // Recursively export each table:\n                return exportNextTable ();\n\n                function exportNextTable () {\n                    var table = tables.shift();\n                    return table.toArray().then(function(a) {\n                        result.push({\n                            tableName: table.name,\n                            contents: a\n                        });\n                        return tables.length > 0 ?\n                            exportNextTable() :\n                            result;\n                    });\n                }\n            });\n        },\n\n        products: {\n            add: function(listing) {\n                $.db.table('products').where(\"listing_id\").equals(listing.listing_id).count(function(count) {\n                    if (count === 0) {\n                        $.db.table('products').add({\n                            bin_id: -1,\n                            listing_id: listing.listing_id,\n                            title: listing.title,\n                            categories: listing.category_path.toString(),\n                            price: listing.price,\n                            created: listing.creation_tsz,\n                            original_creation: listing.original_creation_tsz\n                        }).then(function() {\n                            console.log(\"Added listing #\" + listing.listing_id);\n                        });\n                    } else {\n                        //console.log(\"Attempted to add duplicate listing #\" + listing.listing_id + ' - ' + listing.title);\n                    }\n                });\n            },\n\n            getNew: function(callback) {\n                $.db.table('products').where(\"bin_id\").equals(-1).toArray().then(function(data) {\n                    callback(data);\n                });\n            },\n\n            getAll: function(callback) {\n                $.db.table('products').toArray().then(function(data) {\n                    callback(data);\n                });\n            }\n        },\n\n        bins: {\n            getAll: function(callback) {\n                var bins = [];\n                $.db.table('bins').each(function(bin) {\n                    $.db.table('products').where(\"bin_id\").equals(bin.id).count(function(count) {\n                        bin.total = count;\n                        bins.push(bin);\n                    });\n                }).then(function() {\n                    callback(bins);\n                });\n            },\n\n            add: function(name, notes) {\n                $.db.table('bins').where(\"name\").equals(name).count(function(count) {\n                    if (count === 0) {\n                        $.db.table('bins').add({\n                            name: name,\n                            notes: notes\n                        }).then(function () {\n                            Materialize.toast(\"Created bin '\" + name + \"' succesfully\", 4000);\n                            $.display.updateCounts();\n                        });\n                    } else {\n                        Materialize.toast(\"Bin '\" + name + \"' already exists!\", 4000);\n                    }\n                });\n            },\n\n            delete: function(bin_id, bin_name) {\n                $.db.table('bins').where(\"id\").equals(bin_id).delete().then(function() {\n                    Materialize.toast('Bin #' + bin_id + \" - '\" + bin_name + \"' deleted succesfully\", 4000);\n                });\n            }\n        }\n    };\n});\n"],"sourceRoot":"/source/"}